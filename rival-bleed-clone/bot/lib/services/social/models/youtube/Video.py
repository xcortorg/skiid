# generated by datamodel-codegen:
#   filename:  response.json
#   timestamp: 2024-08-07T17:48:07+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional
from typing_extensions import Self
from pydantic import BaseModel
from aiohttp import ClientSession
from datetime import datetime

KEY = "AIzaSyAmt5HVGtfMfsPliFXxd1RkQKcN7B_zN-s"
class Default(BaseModel):
    url: Optional[str] = None
    width: Optional[int] = None
    height: Optional[int] = None


class Medium(BaseModel):
    url: Optional[str] = None
    width: Optional[int] = None
    height: Optional[int] = None


class High(BaseModel):
    url: Optional[str] = None
    width: Optional[int] = None
    height: Optional[int] = None


class Standard(BaseModel):
    url: Optional[str] = None
    width: Optional[int] = None
    height: Optional[int] = None


class Maxres(BaseModel):
    url: Optional[str] = None
    width: Optional[int] = None
    height: Optional[int] = None


class Thumbnails(BaseModel):
    default: Optional[Default] = None
    medium: Optional[Medium] = None
    high: Optional[High] = None
    standard: Optional[Standard] = None
    maxres: Optional[Maxres] = None


class Localized(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None


class Snippet(BaseModel):
    publishedAt: Optional[datetime] = None
    channelId: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    thumbnails: Optional[Thumbnails] = None
    channelTitle: Optional[str] = None
    tags: Optional[List[str]] = None
    categoryId: Optional[str] = None
    liveBroadcastContent: Optional[str] = None
    localized: Optional[Localized] = None
    defaultAudioLanguage: Optional[str] = None


class ContentDetails(BaseModel):
    duration: Optional[str] = None
    dimension: Optional[str] = None
    definition: Optional[str] = None
    caption: Optional[str] = None
    licensedContent: Optional[bool] = None
    contentRating: Optional[Dict[str, Any]] = None
    projection: Optional[str] = None


class Statistics(BaseModel):
    viewCount: Optional[str] = None
    likeCount: Optional[str] = None
    favoriteCount: Optional[str] = None
    commentCount: Optional[str] = None


class YouTubeVideoItem(BaseModel):
    kind: Optional[str] = None
    etag: Optional[str] = None
    id: Optional[str] = None
    snippet: Optional[Snippet] = None
    contentDetails: Optional[ContentDetails] = None
    statistics: Optional[Statistics] = None


class PageInfo(BaseModel):
    totalResults: Optional[int] = None
    resultsPerPage: Optional[int] = None


class YouTubeVideo(BaseModel):
    kind: Optional[str] = None
    etag: Optional[str] = None
    items: Optional[List[YouTubeVideoItem]] = None
    pageInfo: Optional[PageInfo] = None

    @classmethod
    async def from_id(cls, video_id: str) -> Optional[Self]:
        params = {
            "part": "snippet,contentDetails,statistics",
            "id": video_id,
            "key": KEY
        }
        async with ClientSession() as session:
            async with session.get("https://www.googleapis.com/youtube/v3/videos", params = params) as response:
                data = await response.json()
        for item in data["items"]:
            item["snippet"]["publishedAt"] = datetime.fromisoformat(item["snippet"]["publishedAt"].replace('Z', '+00:00'))
        return cls(**data)

