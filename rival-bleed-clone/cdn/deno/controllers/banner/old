import { Router, Context } from "../../deps.ts";
import { readJson } from "https://deno.land/x/jsonfile/mod.ts"; // Import a JSON file reading utility
import Storage from "../../util/bunny.ts"; // Adjust the import path to your Storage class

const router = new Router();
const LAST_POSTED: Record<string, string> = {};

// Load the JSON file containing asset information
const assetData = await readJson("/root/directories.json"); // Adjust the path to your JSON file

// Initialize the Storage class with your BunnyCDN credentials
const storage = new Storage(`a7be3438-b452-4426-99465b06bd23-0073-43a9`, `rivalcdn`); // Replace with your actual credentials

function randomChoice<T>(array: T[]): T | null {
  if (array.length === 0) return null; // Return null if the array is empty
  const randomIndex = Math.floor(Math.random() * array.length); // Get a random index
  return array[randomIndex]; // Return the random element
}

// Get random avatar
router.get("/autobanner", async (ctx: Context) => {
  const category = ctx.request.url.searchParams.get("category") || "Random";
  const categoryData = assetData.banners[category.toLowerCase()];

  if (!categoryData) {
    ctx.response.status = 404;
    ctx.response.body = { message: "Category not found." };
    return;
  }

  // Randomly select a file from the category
  const randomFile = randomChoice(categoryData);

  if (!randomFile) {
    ctx.response.status = 404;
    ctx.response.body = { message: "No avatars found in this category." };
    return;
  }

  const filename = randomFile; // Assuming the filename is directly stored in the JSON
  const storagePath = `images/banners/${category.toLowerCase()}/${filename}`; // Construct the storage path

  try {
    // Fetch the file content from BunnyCDN using the Storage class
    const fileContent = await storage.get(storagePath);

    // Set the response headers and body
    ctx.response.headers.set("Content-Type", storage.getContentType(filename));
    ctx.response.headers.set("Content-Length", fileContent.byteLength.toString());
    ctx.response.body = fileContent; // Send the file content as the response
  } catch (error) {
    console.error("Error fetching file from BunnyCDN:", error);
    ctx.response.status = 500;
    ctx.response.body = { message: "Error fetching file from BunnyCDN." };
  }
});

export default router;