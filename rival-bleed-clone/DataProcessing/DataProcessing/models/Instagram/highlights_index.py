# generated by datamodel-codegen:
#   timestamp: 2023-01-08T11:08:15+00:00


from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel


class PurpleNode(BaseModel):
    id: Optional[str] = None
    blocked_by_viewer: Optional[bool] = None
    restricted_by_viewer: Optional[bool] = None
    followed_by_viewer: Optional[bool] = None
    follows_viewer: Optional[bool] = None
    full_name: Optional[str] = None
    has_blocked_viewer: Optional[bool] = None
    has_requested_viewer: Optional[bool] = None
    is_private: Optional[bool] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    requested_by_viewer: Optional[bool] = None
    username: Optional[str] = None


class CoverMedia(BaseModel):
    thumbnail_src: Optional[str] = None


class CoverMediaCroppedThumbnail(BaseModel):
    url: Optional[str] = None


class Owner(BaseModel):
    id: Optional[str] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Reel(BaseModel):
    id: Optional[str] = None
    expiring_at: Optional[int] = None
    has_pride_media: Optional[bool] = None
    latest_reel_media: Optional[int] = None
    seen: Optional[Any] = None
    user: Optional[Owner] = None
    owner: Optional[Owner] = None


class Viewer(BaseModel):
    pass


class EdgeChainingEdge(BaseModel):
    node: Optional[PurpleNode] = None


class FluffyNode(BaseModel):
    id: Optional[str] = None
    cover_media: Optional[CoverMedia] = None
    cover_media_cropped_thumbnail: Optional[CoverMediaCroppedThumbnail] = None
    owner: Optional[Owner] = None
    title: Optional[str] = None


class EdgeChaining(BaseModel):
    edges: Optional[List[EdgeChainingEdge]] = None


class EdgeHighlightReelsEdge(BaseModel):
    node: Optional[FluffyNode] = None


class EdgeHighlightReels(BaseModel):
    edges: Optional[List[EdgeHighlightReelsEdge]] = None


class User(BaseModel):
    is_live: Optional[bool] = None
    reel: Optional[Reel] = None
    edge_chaining: Optional[EdgeChaining] = None
    edge_highlight_reels: Optional[EdgeHighlightReels] = None


class Data(BaseModel):
    viewer: Optional[Viewer] = None
    user: Optional[User] = None


class InstagramHighlightGraphQueryRaw(BaseModel):
    data: Optional[Data] = None
    status: Optional[str] = None


class HighlightItem(BaseModel):
    preview_img: Optional[str] = None
    title: Optional[str] = None
    id: str


class InstagramHighlightIndexResponse(BaseModel):
    count: int = 0
    highlights: Optional[List[HighlightItem]] = []
