import plotly.express as px
from discord import Member, File, User
from typing import Union, Optional
from discord.ext.commands import group, Cog, Context, is_owner
from discord.ext import tasks, commands
from io import BytesIO
from tool.worker import offloaded
import datetime, traceback, discord
from asyncio import gather, ensure_future, sleep
from tools import thread  # type: ignore
from datetime import datetime as dt
from logging import getLogger
from collections import defaultdict
from asyncio import Lock
import orjson

logger = getLogger(__name__)


def get_word(num: int):
    return convert_seconds(num)


def get_tb(error: Exception):
    _ = "".join(traceback.format_exception(type(error), error, error.__traceback__))
    return _


def Percent(first: int, second: int, integer: bool = True) -> Union[float, int]:
    try:
        percentage = first / second * 100
        if integer is True:
            return round(float(percentage), 2)
        return percentage
    except Exception:
        return 0


def convert_seconds(duration_seconds: int) -> str:
    duration = datetime.timedelta(seconds=duration_seconds)
    minutes, seconds = divmod(duration.seconds, 60)
    hours, minutes = divmod(minutes, 60)
    duration_text = ""
    if duration.days > 0:
        if duration.days == 1:
            duration_text += f"{duration.days} day, "
        else:
            duration_text += f"{duration.days} days, "
    if hours > 0:
        if hours == 1:
            duration_text += f"{hours} hour, "
        else:
            duration_text += f"{hours} hours, "
    if minutes > 0:
        if minutes == 1:
            duration_text += f"{minutes} minute, "
        else:
            duration_text += f"{minutes} minutes, "
    if seconds > 0:
        if seconds == 1:
            duration_text += f"{seconds} second"
        else:
            duration_text += f"{seconds} seconds"
    if duration_text == "":
        duration_text = "0 seconds, "
    return duration_text.rstrip(", ")


@thread
def GenerateChart(dataset: list, member: Member, days: str = "overall"):
    from io import BytesIO
    import datetime
    from datetime import datetime as dt
    import plotly.express as px

    online = dataset[0]
    idle = dataset[1]
    dnd = dataset[2]
    offline = dataset[3]
    dataset = [online, idle, dnd, offline]
    total_ = sum(dataset)
    names = [
        f"Online<br>{convert_seconds(online)}<br>{Percent(dataset[0], total_)}%",
        f"Idle<br>{convert_seconds(idle)}<br>{Percent(dataset[1], total_)}%",
        f"DND<br>{convert_seconds(dnd)}<br>{Percent(dataset[2], total_, True)}%",
        f"Offline<br>{convert_seconds(offline)}<br>{Percent(dataset[3], total_)}%",
    ]
    px.defaults.width = 829  # image width
    px.defaults.height = 625  # image height
    fig = px.pie(
        values=dataset,
        hole=0.68,
        names=names,
        color=names,
        color_discrete_map={
            names[0]: "#43b581",
            names[1]: "#faa61a",
            names[2]: "#f04747",
            names[3]: "#747f8d",
        },
    )
    fig.update_traces(textinfo="none")
    fig.update_layout(
        paper_bgcolor="rgba(0, 0, 255, 0)",
        legend_font_color="#FFFFFF",
        legend_font_size=24,
        legend_tracegroupgap=15,
    )
    buffer = BytesIO()
    fig.write_image(buffer, format="png")
    buffer.seek(0)
    return buffer.getvalue()


class Screen(Cog):
	def __init__(self, bot):
		self.bot = bot
		self.data = None
		self.update_screentime.start()

	async def cog_load(self):
		if data := await self.bot.redis.get("screentime_data"):
			self.data = orjson.loads(data)
		else:
			self.data = {}
		for m in self.bot.users:
			try:
				if m.user.id != 1203419316230422548 and str(m.user.id) not in self.data:
					self.data[str(m.id)] = int(dt.now().timestamp())
			except Exception:
				pass
		await self.bot.db.execute(
			"""CREATE TABLE IF NOT EXISTS screentime (user_id BIGINT PRIMARY KEY, online BIGINT DEFAULT 1, offline BIGINT DEFAULT 1, idle BIGINT DEFAULT 1, dnd BIGINT DEFAULT 1);"""
		)

	def update_members(self):
		needed = [str(u.id) for u in self.bot.users if str(u.id) not in self.data]
		for u in needed:
			self.data[u] = int(dt.now().timestamp())

	def get_member(self, user_id: int):
		if user := self.bot.get_user(user_id):
			for m in user.mutual_guilds:
				return m.get_member(user.id)
		return None

	async def write_usage(self, before: Member, after: Member):
		online = 0
		offline = 0
		idle = 0
		dnd = 0
		if isinstance(before, discord.ClientUser):
			return
		if str(before.id) in self.data:
			if isinstance(before, User):
				after = before

				before = self.get_member(before.id)
				if not before:
					self.data.pop(str(after.id), None)
					return
			elapsed = int(dt.now().timestamp()) - self.data[str(before.id)]
			if str(before.status) == "online":
				online += elapsed
			if str(before.status) == "offline":
				offline += elapsed
			if str(before.status) == "idle":
				idle += elapsed
			if str(before.status) == "dnd":
				dnd += elapsed
			# if before.name == "aiohttp":
			#     logger.info(
			#         f"setting cop's screentime to \n Online: {online}\nOffline: {offline}\nIdle: {idle}\nDND: {dnd}"
			#     )
			await self.bot.db.execute(
				"""
				INSERT INTO screentime (user_id, online, offline, idle, dnd)
				VALUES ($1, $2, $3, $4, $5)
				ON CONFLICT (user_id)
				DO UPDATE SET
					online = screentime.online + EXCLUDED.online,
					offline = screentime.offline + EXCLUDED.offline,
					idle = screentime.idle + EXCLUDED.idle,
					dnd = screentime.dnd + EXCLUDED.dnd;
				""",
				before.id,
				online,
				offline,
				idle,
				dnd,
			)
			self.data[str(before.id)] = int(dt.now().timestamp())
		else:
			self.data[str(before.id)] = int(dt.now().timestamp())

	@Cog.listener("on_presence_update")
	async def on_status_update(self, before: Member, after: Member):
		if before.id == 1203419316230422548:
			return
		await self.write_usage(before, after)

	@commands.group(
		name="screentime",
		aliases=["screen", "st"],
		brief="see how long you have had each status for",
		example=",screentime @aiohttp",
		usage=",screentime [@member]",
		invoke_without_command=True,
	)
	async def screentime(self, ctx: Context, *, member: Optional[Member]):
		if not member:
			member = ctx.author
		data = await self.bot.db.fetchrow(
			"""SELECT online, idle, dnd, offline FROM screentime WHERE user_id = $1""",
			member.id,
		)
		if not data:
			return await ctx.fail(f"there's no data stored for {member.mention}")
		dataset = [int(data.online), int(data.idle), int(data.dnd), int(data.offline)]
		try:
			now = int(dt.now().timestamp())
			if str(member.id) in self.data:
				if str(member.status) == "online":
					dataset[0] += now - int(self.data.get(str(member.id), 1))
				if str(member.status) == "idle":
					dataset[1] += now - int(self.data.get(str(member.id), 1))
				if str(member.status) == "dnd":
					dataset[2] += now - int(self.data.get(str(member.id), 1))
				else:
					dataset[3] += now - int(self.data.get(str(member.id), 1))
			for d in dataset:
				if d == 0:
					d+=60
			#logger.info(dataset)
			chart = await GenerateChart(dataset, member)
			#logger.info(f"chart type: {type(chart)}\nchart length {len(chart)}")
			file = File(fp=BytesIO(chart), filename="chart.png")
			return await ctx.send(file=file)
		except Exception as e:
			if ctx.author.name == "aiohttp":
				raise e
			return await ctx.fail(f"there's no data stored for {member.mention}")

	@screentime.command(
		name="clear",
		brief="clear your screentime data",
		aliases=["cl"],
		example=",screentime clear",
	)
	async def screentime_clear(self, ctx: Context):
		await self.bot.db.execute(
			"""DELETE FROM screentime WHERE user_id = $1""", ctx.author.id
		)
		return await ctx.success("successfully **CLEARED** your screentime")

	@tasks.loop(hours=1)
	async def update_screentime(self):
		if not self.data:
			await sleep(3)
		try:
			self.update_members()
			try:
				self.data.remove(str(self.bot.user.id))
			except Exception:
				pass
			try:
				async def update(u: int):
					u = self.bot.get_user(u)
					if u:
						return await self.write_usage(u, u)

				await gather(*[update(u) for u in self.data])
			except Exception as e:
				tb = get_tb(e)
				logger.info(f"update_screentime loop raised: {tb}")
		except Exception as e:
			tb = get_tb(e)
			logger.info(f"update_screentime loop raised: {tb}")
		await self.bot.redis.set("screentime_data", orjson.dumps(self.data))
		

async def setup(bot):
    await bot.add_cog(Screen(bot))
