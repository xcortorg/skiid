import socket, subprocess, uuid, asyncio
from discord import Client
from discord.ext.commands import Cog
from data.config import CONFIG
from sanic import Sanic, file, json, raw, response
from sanic.request import Request
from sanic.router import Route
from sanic_cors import CORS


ADDRESS = CONFIG['webserver']

DOMAIN = f"api.{CONFIG['domain']}"


async def check_port_in_use(host: str, port: int) -> bool:
    loop = asyncio.get_running_loop()
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = await loop.run_in_executor(None, sock.bind, (host, port))
        sock.close()
        return False
    except socket.error:
        return True

async def check_port(port: int):
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: subprocess.run(
            ["sudo", "lsof", "-n", f"-i:{port}"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
    )
    # Check and print output
    lines = result.stdout.splitlines()
    data = []
    row_names = [
        "command",
        "pid",
        "user",
        "fd",
        "type",
        "device",
        "size/off",
        "node",
        "range",
        "status",
    ]
    for i, line in enumerate(lines, start=1):
        if i != 1:
            rows = [m for m in line.split(" ") if m != ""]
            data.append(
                {row_names[num - 1]: value for num, value in enumerate(rows, start=1)}
            )
    return [d for d in data if d.get("name") not in ["cloudflared"]]

async def kill_process(data: list):
    loop = asyncio.get_running_loop()
    killed_processes = []
    for d in data:
        if d["pid"] in killed_processes:
            continue
        try:
            await loop.run_in_executor(
                None,
                lambda: subprocess.run(
                    ["kill", "-9", str(d["pid"])],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
            )
            killed_processes.append(d["pid"])
        except Exception:
            pass
    return True


class Webserver(Cog):
    def __init__(self, bot: Client):
        self.bot = bot
        unique_name = f"{self.bot.user.name.title().replace(' ', '-')}-{uuid.uuid4().hex[:8]}"
        self.app = Sanic(name=unique_name)
        cors = CORS(self.app, resources={r"/*": {"origins": "*"}})  # noqa: F841
        self.server = None
        self._commands = None
        self.statistics = None
        self.domain = DOMAIN
        self.assets = {}
        self.app.add_route(self.avatar, "/avatar", methods=["GET", "OPTIONS"])
        self.app.add_route(self.count, "/usercount", methods=["GET", "OPTIONS"])

    async def run(self):
        if await check_port_in_use(ADDRESS["host"], ADDRESS["port"]):
            processes = await check_port(ADDRESS["port"])
            await kill_process(processes)
        self.server = await self.app.create_server(
            **ADDRESS, return_asyncio_server=True
        )

        if self.server is None:
            return

        await self.server.startup()
        await self.server.serve_forever()

    async def avatar(self, request: Request):
        byte = await self.bot.user.avatar.read()
        return raw(byte, status=200, content_type="image/png")
    
    async def count(self, request: Request):
        total_members = sum(g.member_count for g in self.bot.guilds)
        text_channels = sum(len(g.text_channels) for g in self.bot.guilds)
        voice_channels = sum(len(g.voice_channels) for g in self.bot.guilds)
        category_count = sum(len(g.categories) for g in self.bot.guilds)
        return json(
            {
                "total_members": total_members,
                "text_channels": text_channels,
                "voice_channels": voice_channels,
                "category_count": category_count,
                "guild_count": len(self.bot.guilds),
            },
            status=200,
        )
        
    async def cog_load(self):
        self.bot.loop.create_task(self.run())

    async def cog_unload(self):
        self.bot.loop.create_task(self.server.close())
    
async def setup(bot: Client):
    await bot.add_cog(Webserver(bot))